knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
## Abstract for Class
In the 70s Bruce Lee auditioned to be in the show Kung Fu. Set in the American Wild West, the show would feature a Shaolin monk escaping to the US to get caught in several disputes. The part was eventually awarded to David Carradine and rumors exist that Bruce Lee was passed on because "minorities can't carry lead roles." This report seeks to give quantitative evidence to a *casting director at a Hollywood movie studio* to provide evidence as to whether minority (non-white) leads in movies cause changes in box office revenue. Rather than try to vindicate Bruce Lee using historical data, we will use modern data to see whether a modern movie can benefit or lose from casting a minority lead. The main method used is matching minority- and white-led movies with multiple methods and showing causality through linear regression. If making a report to an actual casting director, we would exclude code but we are keeping it here for class.
## Executive Summary
Casting minority actors for lead roles in movies is beneficial for movies in the Action genre and does not cause any statistically significant loss or gain in other genres. This report proves this by scraping movie data from the IMDB and boxofficemojo.com, pruning the data by matching similar movies with POC and non-POC lead actors, then running a linear regression to find any evidence of causality. By looking at movies with similar release dates, genres, and more it was possible to isolate the effect of a lead actor's POC status. In all cases, an actor belonging to a racial minority is not a disadvantage to a movie's revenue and is proven to be a significant positive in Action movies.
## Scraping
Our data for this report was gathered by a process called Scraping.
Web scraping or web harvesting, is the process of using a bot or web crawler to extract content and data from a website, rather than manually copying and pasting results. Web scraping extracts the HTML code and the data stored in a database, and then can recreate the website content elsewhere. Essentially, data from websites is automatically and precedurally extracted according to specification.
For our purposes, we decided to scrape 2 websites, box office mojo and  IMDB. For box office mojo, we collected four yearsâ€™ worth of top domestic box office films in the United States from 2017 to 2020. The relevant data that we searched for was title, gross sales, release date, revenue, and lead actor among other variables. For IMDB, we had a similar approach, but focused on ratings and movie distributor. Lastly for the race data, we were able to find lists on IMDB of actors and their ethnicity
Once the three data sets were sourced, some level of processing was needed to clean the variables in the dataset and re-casted to an appropriate data type. Lastly, we then merged the box office mojo and imdb datasets by movie title, and then merged that newly created set with the race data set by lead actor name.
The full data results from this step is available on github at
To make sure results were accurate, we checked and cleaned the data manually. Removing any incomplete or repeating data then checking whether actor-race matches were accurate. The final dataset is then sent to analysis below.
## Initial Analysis
```{r, include=FALSE}
data<-read.csv("../00_data/full_data_manualfix.csv")
data<-read.csv("../00_data/full_data_manualfix.csv")
A linear regression can be an effective way to estimate the effect of a certain feature, like whether the lead actor is of a minority race or not. We can isolate the effect it can have on an outcome like a movie's gross revenue by using regression and accounting for other variables to make sure we isolate the effect. The way this happens is that through statistics, a linear regression can assign weights to variables to try to predict a movie's gross revenue the best it can. In these regressions, it is also possible to mathematically calculate whether we are sure an effect exists, a process summarized by the displayed p-score. If a p-score is above 0.05, we say that we aren't sure if the effect is statistically significant. If something is statistically significant, we are assuming that the resulting coefficient is not a random occurrence but can be attributed to a cause.
In other words, if we want to see if a racial minority lead actor affects gross revenue, then we can check whether the variable that accounts for POC status has a p-score of less than 0.05.
Let's begin by running a regression on the data we have scraped and cleaned. Firstly let's only use the Race variable:
```{r}
summary(lm(gross~Race,data=data))
summary(lm(gross~Race,data=data))
```{r}
However, we must also consider the many other variables we have, adding other variables could clarify the effect and isolate it further. Let's try a new regression with a few more variables.
```{r}
summary(lm(gross~Race+year+genre +Male+opening_theaters,data=data))
summary(lm(gross~Race+year+genre +Male+opening_theaters,data=data))
What we're looking at here is a baseline or intercept of White female lead actors in Action movies in the year 2017 with no opening theaters (an illogical but mathematically fine assumption since we correct it later). The coefficients modify the expected gross revenue of a movie depending on their characteristics. What we see here is that there is a clearly significant difference between Action movies and other genres, where Action movies tend to make more money. This is also true for male-led movies, where we see a larger gross revenue effect. We also included the number of opening theaters for the movie, which should relate to how large the movie's production is, and we see that movies launched on more theaters make more revenue.
In the end though, whether the lead is a POC or what year it was made does not seem to show any statistically significant difference.
However, the data isn't well-balanced between POC and non-POC lead actors which we can see below:
```{r}
table(data$Race)
table(data$Race)
POC-led movies are only 106 movies or around 21.4% of the data. If we plot these movies using their IMDB Ratings and their Gross Revenue, we can see that non-POC movies occupy more space.
```{r}
library(ggplot2)
p1
library(ggplot2)
p1<-ggplot(data, aes(x=imdb_rating, y=gross, color=Race))+geom_point(size=2.8,alpha=.55)+ labs(title=("Movie Gross x Rating"))+xlab("IMDB Rating")+ylab("Gross Revenue")+theme_minimal()
p1
```{r}
library(ggplot2)
p1<-ggplot(data, aes(x=imdb_rating, y=gross, color=Race))+geom_point(size=2.8,alpha=.55)+ labs(title=("Movie Gross x Rating"))+xlab("IMDB Rating")+ylab("Gross Revenue")+theme_minimal()
p1
hist(data$opening_theaters,xlab="Opening Theater #",main = paste("Histogram of Movies' Opening Theaters"))
data$OPT<-"<1000"
data[data$opening_theaters>=4250,"OPT"]<-">4250"
for (y in c(4250,4000,3750,3500,3250,3000,2500,2000)) {
data[data$opening_theaters<y,"OPT"]<-paste("<",y)
}
table(data$OPT)
hist((data$imdb_rating),xlab="IMDB Rating",main = paste("Histogram of Movies IMDB Ratings"))
data$IMDB<-0
for (y in seq(1,10,.5)) {
data[round(data$imdb_rating)==y,"IMDB"]<-y
}
data$IMDBbin<-"5-"
data[round(data$imdb_rating)==6,"IMDBbin"]<-"6/7"
data[round(data$imdb_rating)==7,"IMDBbin"]<-"6/7"
data[round(data$imdb_rating)>7,"IMDBbin"]<-"8+"
table(data$IMDBbin)
library(MatchIt)
data$treat<-0
data[data$Race=="POC","treat"]<-1
m.out <- matchit(treat ~ year+genre+OPT+film_rating+Male+IMDBbin,
data = data, method = "exact",verbose=TRUE)
m.data <- match.data(m.out)
nrow(data)
nrow(m.data)
table(m.data$Race)
library(gridExtra)
p2<-ggplot(m.data, aes(x=imdb_rating, y=gross, color=Race))+geom_point(size=2.8,alpha=.55)+ labs(title=("   Exact Match w/Bins"))+xlab("IMDB Rating")+ylab("Gross Revenue")+theme_minimal()+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank())
grid.arrange(p1+ theme(legend.position="none"),p2+ theme(legend.position="none"),ncol=2)
summary(lm(gross~Race+year+genre+opening_theaters+film_rating+Male+imdb_rating,data=m.data,weights=weights))
summary(lm(gross~Race+year+genre+genre:Race+opening_theaters+film_rating+Male+imdb_rating,data=m.data,weights=weights))
#original
paste("Original Data rows:",nrow(data))
paste("Exact-matched Data rows:",nrow(m.data))
paste("Optimal-matched Data rows:",nrow(m.data2))
#Note: optimal matching naturally attempts 1:1 matching but can be modified to do 1:n
m.out2 <- matchit(treat ~ year+genre+opening_theaters+film_rating+Male+imdb_rating,
data = data, method = "optimal",verbose=TRUE)
m.data2 <- match.data(m.out2)
#original
paste("Original Data rows:",nrow(data))
paste("Exact-matched Data rows:",nrow(m.data))
paste("Optimal-matched Data rows:",nrow(m.data2))
table(m.data2$Race)
p3<-ggplot(m.data2, aes(x=imdb_rating, y=gross, color=Race))+geom_point(size=2.8,alpha=.55)+ labs(title=("Optimal Match"))+xlab("IMDB Rating")+ylab("Gross Revenue")+theme_minimal()+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank())
grid.arrange(p1+ theme(legend.position="none")+ labs(title=("Original Data")),p2+ theme(legend.position="none"),p3+ theme(legend.position="none"),ncol=3)
#Note: Since matches were maid 1:1 there is no weight output.
summary(lm(gross~Race+year+genre+genre:Race+opening_theaters+film_rating+Male+imdb_rating,data=m.data2))
+xlab("IMDB Rating")+ylab("Gross Revenue")+theme_minimal()
library(ggplot2)
p1<-ggplot(data, aes(x=imdb_rating, y=gross, color=Race))
+geom_point(size=2.8,alpha=.55)+ labs(title=("Movie Gross x Rating"))
library(ggplot2)
p1<-ggplot(data, aes(x=imdb_rating, y=gross, color=Race))
+geom_point(size=2.8,alpha=.55)+ labs(title=("Movie Gross x Rating"))
library(ggplot2)
p1<-ggplot(data, aes(x=imdb_rating, y=gross, color=Race)) +
geom_point(size=2.8,alpha=.55)+ labs(title=("Movie Gross x Rating")) +
xlab("IMDB Rating")+ylab("Gross Revenue")+theme_minimal()
p1
library(ggplot2)
p1<-ggplot(data, aes(x=imdb_rating, y=gross, color=Race)) +
geom_point(size=2.8,alpha=.55)+ labs(title=("Movie Gross x Rating")) +
xlab("IMDB Rating")+ylab("Gross Revenue") +
theme_minimal()
p1
library(ggplot2)
p1<-ggplot(data, aes(x=imdb_rating, y=gross, color=Race)) +
geom_point(size=2.8,alpha=.55)+ labs(title=("Movie Gross x Rating")) +
xlab("IMDB Rating")+ylab("Gross Revenue") +
scale_x_continuous(trans='log2') +
theme_minimal()
p1
library(ggplot2)
p1<-ggplot(data, aes(x=imdb_rating, y=gross, color=Race)) +
geom_point(size=2.8,alpha=.55)+ labs(title=("Movie Gross x Rating")) +
xlab("IMDB Rating")+ylab("Gross Revenue") +
scale_x_continuous(trans='log') +
theme_minimal()
p1
library(ggplot2)
p1<-ggplot(data, aes(x=imdb_rating, y=gross, color=Race)) +
geom_point(size=2.8,alpha=.55)+ labs(title=("Movie Gross x Rating")) +
xlab("IMDB Rating")+ylab("Gross Revenue") +
scale_y_continuous(trans='log') +
theme_minimal()
p1
library(ggplot2)
p1<-ggplot(data, aes(x=imdb_rating, y=gross, color=Race)) +
geom_point(size=2.8,alpha=.55)+ labs(title=("Movie Gross x Rating")) +
xlab("IMDB Rating")+ylab("Gross Revenue") +
scale_y_continuous(trans='log2') +
theme_minimal()
p1
library(ggplot2)
p1<-ggplot(data, aes(x=imdb_rating, y=gross, color=Race)) +
geom_point(size=2.8,alpha=.55)+ labs(title=("Movie Gross x Rating")) +
xlab("IMDB Rating")+ylab("Gross Revenue") +
scale_y_continuous(trans='log10') +
theme_minimal()
p1
library(ggplot2)
p1<-ggplot(data, aes(x=imdb_rating, y=gross, color=Race)) +
geom_point(size=2.8,alpha=.55)+ labs(title=("Log_10 Movie Gross x Rating")) +
xlab("IMDB Rating")+ylab("log Gross Revenue") +
scale_y_continuous(trans='log10', labels=scales::dollar_format()) +
theme_minimal()
p1
library(ggplot2)
p1<-ggplot(data, aes(x=imdb_rating, y=gross, color=Race)) +
geom_point(size=2.8,alpha=.55)+ labs(title=("Movie Gross x Rating")) +
xlab("IMDB Rating")+ylab("Log Gross Revenue") +
scale_y_continuous(trans='log10', labels=scales::dollar_format()) +
theme_minimal()
p1
library(ggplot2)
p1<-ggplot(data, aes(x=imdb_rating, y=gross, color=Race)) +
geom_point(size=2.8,alpha=.55)+ labs(title=("Movie Gross x Rating")) +
xlab("IMDB Rating")+ylab("Gross Revenue (log scale)") +
scale_y_continuous(trans='log10', labels=scales::dollar_format()) +
theme_minimal()
p1
library(ggplot2)
p1<-ggplot(data, aes(x=imdb_rating, y=gross, color=Race)) +
geom_point(size=2.8,alpha=.55)+ labs(title=("Movie Gross x Rating")) +
xlab("IMDB Rating")+ylab("Gross Revenue (log10 scale)") +
scale_y_continuous(trans='log10', labels=scales::dollar_format()) +
theme_minimal()
p1
hist(data$opening_theaters,xlab="Opening Theater #",main = paste("Histogram of Movies' Opening Theaters"), labels = TRUE)
hist(data$opening_theaters,xlab="Opening Theater #",main = paste("Histogram of Movies' Opening Theaters"), labels = TRUE, ylim=c(0,45))
hist(data$opening_theaters,xlab="Opening Theater #",main = paste("Histogram of Movies' Opening Theaters"), labels = TRUE, ylim=c(0,100))
hist(data$opening_theaters,xlab="Opening Theater #",main = paste("Histogram of Movies' Opening Theaters"), labels = TRUE, ylim=c(0,10)
hist(data$opening_theaters,xlab="Opening Theater #",main = paste("Histogram of Movies' Opening Theaters"), labels = TRUE, ylim=c(0,10))
hist(data$opening_theaters,xlab="Opening Theater #",main = paste("Histogram of Movies' Opening Theaters"), labels = TRUE)
?hist
hist(data$opening_theaters,xlab="Opening Theater #",main = paste("Histogram of Movies' Opening Theaters"), labels = TRUE, border = "dark blue")
hist(data$opening_theaters,xlab="Opening Theater #",main = paste("Histogram of Movies' Opening Theaters"), labels = TRUE)
par(mar = c(2, 2, 2, 2))
hist(data$opening_theaters,xlab="Opening Theater #",main = paste("Histogram of Movies' Opening Theaters"), labels = TRUE)
#par(mar = c(2, 2, 2, 2))
hist(data$opening_theaters,xlab="Opening Theater #",main = paste("Histogram of Movies' Opening Theaters"), labels = TRUE)
#ar(mar = c(2, 2, 2, 2))
hist(data$opening_theaters,xlab="Opening Theater #",main = paste("Histogram of Movies' Opening Theaters"), labels = TRUE)
par(mar = c(2, 2, 2, 2))
hist(data$opening_theaters,xlab="Opening Theater #",main = paste("Histogram of Movies' Opening Theaters"), labels = TRUE)
par(mar = c(3, 3, 3, 3))
hist(data$opening_theaters,xlab="Opening Theater #",main = paste("Histogram of Movies' Opening Theaters"), labels = TRUE)
par(mar = c(10, 3, 3, 3))
hist(data$opening_theaters,xlab="Opening Theater #",main = paste("Histogram of Movies' Opening Theaters"), labels = TRUE)
par(mar = c(3, 3, 3, 3))
hist(data$opening_theaters,xlab="Opening Theater #",main = paste("Histogram of Movies' Opening Theaters"), labels = TRUE)
par(mar = c(3, 10, 3, 3))
hist(data$opening_theaters,xlab="Opening Theater #",main = paste("Histogram of Movies' Opening Theaters"), labels = TRUE)
par(mar = c(3, 10, 10, 3))
hist(data$opening_theaters,xlab="Opening Theater #",main = paste("Histogram of Movies' Opening Theaters"), labels = TRUE)
par(mar = c(3, 3, 10, 3))
hist(data$opening_theaters,xlab="Opening Theater #",main = paste("Histogram of Movies' Opening Theaters"), labels = TRUE)
mtext("Small Margins", side = 3, line = 1, cex = 1.2)
mtext("Small Margins", side = 3, line = 1, cex = 1.2)
par(mar = c(3, 3, 10, 3))
hist(data$opening_theaters,xlab="Opening Theater #",main = paste("Histogram of Movies' Opening Theaters"), labels = TRUE)
par(mar = c(3, 3, 10, 3))
hist(data$opening_theaters,xlab="Opening Theater #",main = paste("Histogram of Movies' Opening Theaters"), labels = TRUE, pos=3)
hist(data$opening_theaters,xlab="Opening Theater #",main = paste("Histogram of Movies' Opening Theaters"), labels = TRUE, pos=3)
hist(data$opening_theaters,xlab="Opening Theater #",main = paste("Histogram of Movies' Opening Theaters"), labels = TRUE, cex=3)
hist(data$opening_theaters,xlab="Opening Theater #",main = paste("Histogram of Movies' Opening Theaters"), labels = TRUE, cex=2)
hist(data$opening_theaters,xlab="Opening Theater #",main = paste("Histogram of Movies' Opening Theaters"), labels = TRUE, cex=1)
hist(data$opening_theaters,xlab="Opening Theater #",main = paste("Histogram of Movies' Opening Theaters"), labels = TRUE)
text(bp, 0, round(femaleses, 1),cex=1,pos=3)
bp <-hist(data$opening_theaters,xlab="Opening Theater #",main = paste("Histogram of Movies' Opening Theaters"), labels = TRUE)
text(bp, 0, round(femaleses, 1),cex=1,pos=3)
bp <-hist(data$opening_theaters,xlab="Opening Theater #",main = paste("Histogram of Movies' Opening Theaters"), labels = TRUE)
text(bp,cex=1,pos=3)
hist(data$opening_theaters,xlab="Opening Theater #",main = paste("Histogram of Movies' Opening Theaters"), labels = TRUE)
hist((data$imdb_rating),xlab="IMDB Rating",main = paste("Histogram of Movies IMDB Ratings"), labels = True)
hist((data$imdb_rating),xlab="IMDB Rating",main = paste("Histogram of Movies IMDB Ratings"), labels = TRUE)
library(gridExtra)
p2<-ggplot(m.data, aes(x=imdb_rating, y=gross, color=Race))+geom_point(size=2.8,alpha=.55)+ labs(title=("   Exact Match w/Bins"))+xlab("IMDB Rating")+ylab("Gross Revenue")+theme_minimal()+
scale_y_continuous(trans='log10', labels=scales::dollar_format()) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank())
grid.arrange(p1+ theme(legend.position="none"),p2+ theme(legend.position="none"),ncol=2)
summary(lm(gross~Race+year+genre+opening_theaters+film_rating+Male+imdb_rating,data=m.data,weights=weights))
p3<-ggplot(m.data2, aes(x=imdb_rating, y=gross, color=Race))+geom_point(size=2.8,alpha=.55)+ labs(title=("Optimal Match"))+xlab("IMDB Rating")+ylab("Gross Revenue")+theme_minimal()+ scale_y_continuous(trans='log10', labels=scales::dollar_format()) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank())
grid.arrange(p1+ theme(legend.position="none")+ labs(title=("Original Data")),p2+ theme(legend.position="none"),p3+ theme(legend.position="none"),ncol=3)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80), tidy=TRUE)
library(ggplot2)
# load package
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(sjmisc)
library(sjlabelled)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80), tidy=TRUE)
library(ggplot2)
# load package
library(sjPlot)
library(sjmisc)
library(sjlabelled)
## Abstract for Class
In the 70s Bruce Lee auditioned to be in the show Kung Fu. Set in the American Wild West, the show would feature a Shaolin monk escaping to the US to get caught in several disputes. The part was eventually awarded to David Carradine and rumors exist that Bruce Lee was passed on because "minorities can't carry lead roles." This report seeks to give quantitative evidence to a *casting director at a Hollywood movie studio* to provide evidence as to whether minority (non-white) leads in movies cause changes in box office revenue. Rather than try to vindicate Bruce Lee using historical data, we will use modern data to see whether a modern movie can benefit or lose from casting a minority lead. The main method used is matching minority- and white-led movies with multiple methods and showing causality through linear regression. If making a report to an actual casting director, we would exclude code but we are keeping it here for class.
## Executive Summary
Casting minority actors for lead roles in movies is beneficial for movies in the Action genre and does not cause any statistically significant loss or gain in other genres. This report proves this by scraping movie data from the IMDB and boxofficemojo.com, pruning the data by matching similar movies with POC and non-POC lead actors, then running a linear regression to find any evidence of causality. By looking at movies with similar release dates, genres, and more it was possible to isolate the effect of a lead actor's POC status. In all cases, an actor belonging to a racial minority is not a disadvantage to a movie's revenue and is proven to be a significant positive in Action movies.
## Scraping
Our data for this report was gathered by a process called Scraping.
Web scraping or web harvesting, is the process of using a bot or web crawler to extract content and data from a website, rather than manually copying and pasting results. Web scraping extracts the HTML code and the data stored in a database, and then can recreate the website content elsewhere. Essentially, data from websites is automatically and precedurally extracted according to specification.
For our purposes, we decided to scrape 2 websites, box office mojo and  IMDB. For box office mojo, we collected four yearsâ€™ worth of top domestic box office films in the United States from 2017 to 2020. The relevant data that we searched for was title, gross sales, release date, revenue, and lead actor among other variables. For IMDB, we had a similar approach, but focused on ratings and movie distributor. Lastly for the race data, we were able to find lists on IMDB of actors and their ethnicity
Once the three data sets were sourced, some level of processing was needed to clean the variables in the dataset and re-casted to an appropriate data type. Lastly, we then merged the box office mojo and imdb datasets by movie title, and then merged that newly created set with the race data set by lead actor name.
The full data results from this step is available on github at
To make sure results were accurate, we checked and cleaned the data manually. Removing any incomplete or repeating data then checking whether actor-race matches were accurate. The final dataset is then sent to analysis below.
## Initial Analysis
data<-read.csv("../00_data/full_data_manualfix.csv")
A linear regression can be an effective way to estimate the effect of a certain feature, like whether the lead actor is of a minority race or not. We can isolate the effect it can have on an outcome like a movie's gross revenue by using regression and accounting for other variables to make sure we isolate the effect. The way this happens is that through statistics, a linear regression can assign weights to variables to try to predict a movie's gross revenue the best it can. In these regressions, it is also possible to mathematically calculate whether we are sure an effect exists, a process summarized by the displayed p-score. If a p-score is above 0.05, we say that we aren't sure if the effect is statistically significant. If something is statistically significant, we are assuming that the resulting coefficient is not a random occurrence but can be attributed to a cause.
In other words, if we want to see if a racial minority lead actor affects gross revenue, then we can check whether the variable that accounts for POC status has a p-score of less than 0.05.
Let's begin by running a regression on the data we have scraped and cleaned. Firstly let's only use the Race variable:
```{r}
summary(lm(gross~Race,data=data))
tab_model(lm(gross~Race,data=data))
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80), tidy=TRUE)
library(ggplot2)
# load package
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(parameters)
model <- lm(gross~Race,data=data)
mp <- model_parameters(model)
print_html(mp)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80), tidy=TRUE)
library(ggplot2)
# load package
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(parameters)
model <- lm(gross~Race,data=data)
mp <- model_parameters(model)
print_html(mp)
install.packages("devtools")
devtools::install_github("easystats/easystats")
install.packages("devtools")
devtools::install_github("easystats/easystats")
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80), tidy=TRUE)
library(ggplot2)
# load package
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(parameters)
library(easystats)
devtools::instal_github("easystats/easystats")
devtools::install_github("easystats/easystats")
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80), tidy=TRUE)
library(ggplot2)
# load package
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(parameters)
library(easystats)
?update
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80), tidy=TRUE)
library(ggplot2)
# load package
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(parameters)
library(easystats)
model <- lm(gross~Race,data=data)
mp <- model_parameters(model)
print_html(mp)
model <- lm(gross~Race,data=data)
mp <- model_parameters(model)
print_html(mp)
install.packages(gt)
install.packages("gt")
install.packages("gt")
model <- lm(gross~Race,data=data)
mp <- model_parameters(model)
print_html(mp)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80), tidy=TRUE)
library(ggplot2)
# load package
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(parameters)
library(easystats)
model <- lm(gross~Race,data=data)
mp <- model_parameters(model)
print_html(mp)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80), tidy=TRUE)
library(ggplot2)
# load package
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(parameters)
library(easystats)
library(gt)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80), tidy=TRUE)
library(ggplot2)
# load package
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(parameters)
library(easystats)
library(gt)
install.pacakges("htmltools")
install.packages("htmltools")
install.packages("htmltools")
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80), tidy=TRUE)
library(ggplot2)
# load package
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(parameters)
library(easystats)
library(gt)
install.packages(c("arm", "backports", "bayesplot", "BH", "boot", "bridgesampling", "brms", "broom", "Cairo", "callr", "car", "carData", "caret", "class", "clipr", "cluster", "cobalt", "coda", "codetools", "colourpicker", "config", "covr", "crosstalk", "data.table", "DBI", "dbplyr", "desc", "devtools", "DT", "e1071", "fastmap", "forcats", "foreach", "formatR", "Formula", "future", "ggeffects", "ggrepel", "ggstance", "gh", "git2r", "glmmTMB", "glmnet", "globals", "gower", "gtools", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmlwidgets", "httpuv", "hunspell", "igraph", "imager", "inline", "ipred", "IRdisplay", "IRkernel", "ISOcodes", "iterators", "jomo", "kableExtra", "keras", "KernSmooth", "knitr", "laeken", "later", "lattice", "latticeExtra", "lava", "leaps", "listenv", "lme4", "lmerTest", "lmtest", "loo", "lubridate", "manipulateWidget", "maptools", "MASS", "Matching", "MatchIt", "Matrix", "MatrixModels", "matrixStats", "memoise", "mgcv", "mice", "mitml", "mnormt", "ModelMetrics", "modelr", "modeltools", "multcomp", "mvnfast", "naniar", "network", "nlme", "nloptr", "NLP", "nnet", "openxlsx", "optmatch", "ordinal", "packrat", "pbdZMQ", "pbkrtest", "pkgbuild", "pkgload", "plotly", "polspline", "prettyunits", "pROC", "processx", "prodlim", "promises", "ps", "psych", "quantreg", "ranger", "rappdirs", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "readr", "recipes", "repr", "reprex", "reshape2", "reticulate", "rex", "rio", "rmarkdown", "rms", "robustbase", "roxygen2", "rprojroot", "rsconnect", "rstan", "rstantools", "rstudioapi", "rversions", "sandwich", "shape", "shiny", "shinyjs", "shinythemes", "sjlabelled", "sjmisc", "sjPlot", "sjstats", "slam", "sna", "SnowballC", "sp", "SparseM", "spatial", "SQUAREM", "StanHeaders", "statnet.common", "stm", "stopwords", "survival", "tables", "tensorflow", "testthat", "text2vec", "tfruns", "threejs", "tidyr", "tidytext", "tidyverse", "tiff", "tinytex", "tm", "TMB", "topicmodels", "usethis", "uuid", "vcd", "VIM", "viridis", "webshot", "xfun", "xts", "yaml", "zip", "zoo"))
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80), tidy=TRUE)
library(ggplot2)
# load package
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(parameters)
library(easystats)
library(gt)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80), tidy=TRUE)
library(ggplot2)
# load package
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(parameters)
library(easystats)
model <- lm(gross~Race,data=data)
mp <- model_parameters(model)
print_html(mp)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80), tidy=TRUE)
library(ggplot2)
# load package
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(parameters)
library(easystats)
library(gt)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80), tidy=TRUE)
library(ggplot2)
# load package
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(parameters)
library(easystats)
library(htmltools)
